{"version":3,"sources":["components/loading.tsx","utils/contract.utils.ts","utils/WalletStateContext.tsx","forms/mint-form.tsx","pages/buy-page.tsx","dialogs/sale-dialog.tsx","pages/owned-tokens-page.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoadingComponent","props","open","Backdrop","sx","color","zIndex","theme","drawer","CircularProgress","getNFTMarketContract","address","ethereum","abi","NFTMarket","getContract","getNftContract","Nft","signer","ethers","providers","Web3Provider","getSigner","Contract","connect","isTransactionMined","hash","numberOfBlocks","a","Promise","resolve","reject","provider","blockCount","on","_blockNumber","removeAllListeners","getTransactionReceipt","txReceipt","blockNumber","error","console","log","WalletStateSkeleton","queuedTx","pendingTx","completedTx","warning","noOperations","addNewQueuedTx","action","description","meta","convertQueuedToPending","_tx","_description","_meta","doAnOperation","isBusy","WalletStateContext","React","createContext","client","SkynetClient","onUploadProgress","progress","loaded","total","toast","Math","round","saveNft","nft","genKeyPairFromSeed","owner","privateKey","publicKey","savedNftsKey","db","getJSON","entry","data","push","setJSON","MintForm","useState","formState","setFormState","showLoading","setShowLoading","isUriError","setIsUriError","uriError","setUriError","isPriceError","setIsPriceError","priceError","setPriceError","wallet","useWallet","walletStateContext","useContext","useEffect","addGnosisChainNetwork","chainId","process","chainName","symbol","rpcUrl","explorerUrl","request","method","params","code","nativeCurrency","name","decimals","rpcUrls","blockExplorerUrls","iconUrls","isConnected","status","NEXT_PUBLIC_CHAIN_ID","handleTextAreaChange","event","target","value","handleChange","validateUri","fetch","uri","json","response","image","validateRoyaltyAddresses","royaltyAddresses","split","royaltyPercentages","length","map","el","reduce","sum","validateFeeAddresses","feeAddresses","feePercentages","getMintedTokenIdFromTransactionReceipt","relevantTransferEvent","events","find","e","tokenId","args","toNumber","to","validate","info","price","mint","nftMarket","mintTxPromise","mintTx","wait","mintTxExecuted","transactionHash","REACT_APP_TX_WAIT_BLOCK_COUNT","account","Error","success","Grid","container","spacing","item","xs","TextField","type","label","defaultValue","fullWidth","margin","onChange","helperText","TextareaAutosize","minRows","placeholder","style","width","Button","variant","onClick","nftContractAddress","BuyPage","page","rowsPerPage","paginatedTokens","setPaginatedTokens","getUri","tokenURI","url","metadata","getAllTokens","currentTokenId","allNfts","tokenInfos","end","start","i","getTokenInfo","blockTokenInfo","forSale","forAuction","forLoan","minter","onLoan","utils","formatEther","tokenInfo","token","src","alt","fontWeight","Number","toFixed","SaleDialog","handleClose","imageUrl","setImageUrl","disableSale","setDisableSale","saleType","setSaleType","setDescription","isMounted","Dialog","onClose","maxWidth","DialogTitle","DialogContent","DialogContentText","disabled","FormControl","m","minWidth","Select","displayEmpty","inputProps","MenuItem","FormHelperText","OwnedTokensPage","userTokens","setUserTokens","setPage","setRowsPerPage","showSaleDialog","setShowSaleDialog","selectedToken","setSelectedToken","columns","id","populateUserTokens","balanceOf","balanceOfAddress","tokenOfOwnerByIndex","Paper","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","column","TableCell","align","TableBody","slice","row","hover","role","tabIndex","TablePagination","rowsPerPageOptions","component","count","onPageChange","newPage","onRowsPerPageChange","App","setValue","TabPanel","children","index","other","hidden","Box","p","a11yProps","ConnectWallet","paddingTop","display","gap","reset","Container","borderBottom","borderColor","Tabs","newValue","Tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0cf6677.chunk.js","sourcesContent":["import * as React from \"react\";\nimport Backdrop from \"@mui/material/Backdrop\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport { DialogProps } from \"@mui/material\";\n\nconst LoadingComponent = (props: DialogProps) => {\n  const { open } = props;\n\n  return (    \n      <Backdrop\n        sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={open}\n      >\n        <CircularProgress color=\"warning\" />\n      </Backdrop>\n  );\n}\n\nexport default LoadingComponent;","import Loans from \"../contract-abis/Loans.json\";\nimport Auctions from \"../contract-abis/Auctions.json\";\nimport NFTMarket from \"../contract-abis/NFTMarket.json\";\nimport Nft from \"../contract-abis/ERC721Standard.json\";\n\nimport { ethers } from \"ethers\";\n\nexport const getNFTMarketContract = (address: string, ethereum: any) => {\n  const abi = NFTMarket.abi;\n  return getContract(address, ethereum, abi);\n};\n\nexport const getAuctionContract = (address: string, ethereum: any) => {\n  const abi = Auctions.abi;\n  return getContract(address, ethereum, abi);\n};\n\nexport const getLoanContract = (address: string, ethereum: any) => {\n  const abi = Loans.abi;\n  return getContract(address, ethereum, abi);\n};\n\nexport const getNftContract = (address: string, ethereum: any) => {\n  const abi = Nft.abi;\n  return getContract(address, ethereum, abi);\n};\n\n\nconst getContract = (address: string, ethereum: any, abi: any) => {\n  const provider = new ethers.providers.Web3Provider(ethereum); //providers.Web3Provider(web3.currentProvider);\n  const signer = provider.getSigner();\n  const contract = new ethers.Contract(address, abi, signer);\n  const contractWithSigner = contract.connect(signer);\n  return contractWithSigner;\n};\n\nexport const isTransactionMined = async (\n  ethereum: any,\n  hash: string,\n  numberOfBlocks: number\n): Promise<boolean> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      let blockCount = 0;\n      provider.on(\"block\", async (_blockNumber) => {\n        blockCount++;\n        if (blockCount > numberOfBlocks) {\n          provider.removeAllListeners(\"block\");\n          resolve(false);\n        }\n        const txReceipt = await provider.getTransactionReceipt(hash);\n        if (txReceipt && txReceipt.blockNumber) {\n          provider.removeAllListeners(\"block\");\n          resolve(true);\n        }\n      });\n    } catch (error) {\n      console.log(`waiting for transaction rejected with error`, error);\n      reject(error);\n    }\n  });\n};\n","import React, { useState } from 'react';\n\nconst WalletStateSkeleton = {\n    queuedTx: null,\n    pendingTx: [],\n    completedTx: null,\n    warning: null,\n    noOperations: 0,\n    addNewQueuedTx: (action: Promise<any>, description: any, meta: any) => null,\n    convertQueuedToPending: (_tx: any, _description: any, _meta: any) => null,\n    doAnOperation: () => null,\n    isBusy: () => null,\n};\n\nconst WalletStateContext = React.createContext(WalletStateSkeleton); // Create context with defaults\n\nexport const getWalletStateContext = () => {\n    return WalletStateContext;\n};\n\nconst DISMISS_WARNINGS_TIMEOUT = 3000; // time to let warnings linger on state\nconst DISMISS_SUCCESS_TIMEOUT = 3000; // time to let successes linger on state\nconst NUMBER_OF_CONFIRMATIONS_REQUIRED = 1;\n\nconst WalletStateProvider = ({ children }) => {\n    // TODO: potentially load state saved in localstorage\n    const [queuedTx, setQueuedTx] = useState<any>();\n    const [pendingTx, setPendingTx] = useState<any>();\n    const [completedTx, setCompletedTx] = useState<any>();\n    const [noOperations, setNoOperations] = useState(0);\n    const [warning, setWarning] = useState<any>();\n\n    const doAnOperation = () => {\n        setNoOperations(noOperations + 1);\n    };\n\n    // Close Pending TX on SUCCESS.\n    const closePendingTx = (hash: string, description: any, meta: any) => {\n        console.log(\n            '[WALLETCONTEXT]: closePendingTx called with has: ',\n            hash,\n            ' and current pendingTx array which is: ',\n            pendingTx,\n        );\n        const existingPendingTx = pendingTx.find((e: any) => e.hash === hash);\n        if (existingPendingTx) {\n            setPendingTx(pendingTx.filter((e: any) => e.hash !== hash));\n            // const appendedCompleted = completedTx.concat(existingPendingTx);\n            setCompletedTx(existingPendingTx);\n            setTimeout(() => {\n                setCompletedTx(undefined);\n            }, DISMISS_SUCCESS_TIMEOUT);\n        } else {\n            // if the update was so fast that a close was called on pendingTx and that is not yet there, we can just append straight to the completed:\n            setCompletedTx({ hash, description, meta });\n\n            setTimeout(() => {\n                setCompletedTx(null);\n            }, DISMISS_SUCCESS_TIMEOUT);\n            setPendingTx([]);\n        }\n    };\n\n    const convertQueuedToPending = (tx: { hash: any; wait: (arg0: number) => Promise<any>; }, description: any, meta: any) => {\n        console.log('Converting Queued To Pending');\n        setNoOperations(noOperations + 1);\n        setQueuedTx(null); // There will only ever be ONE queued TX.\n        const appendedPending = pendingTx.concat({\n            tx,\n            description,\n            meta,\n            hash: tx.hash,\n        });\n        // Add to the pending tx array:\n        setPendingTx(appendedPending);\n        // Create a hook for moving this pending item to completed\n\n        // const boundClosePendingCall = closePendingTx.bind(this, appendedPending, tx.hash);\n        console.log('Waiting for Confirmation');\n        tx.wait(NUMBER_OF_CONFIRMATIONS_REQUIRED).then(\n            () => {\n                console.log('Should be success');\n                closePendingTx(tx.hash, description, meta);\n            },\n            (error: any) => {\n                closePendingTx(tx.hash, description, meta);\n                console.log('Should be Error');\n                console.log(error);\n            },\n        );\n    };\n\n    const addNewQueuedTx = (action: Promise<any>, description: any, meta: any) => {\n        setNoOperations(noOperations + 1);\n        setWarning(null);\n        setQueuedTx({ action, description });\n        // subscribe to this event:\n        action\n            .then((result: any) => {\n                // this is the on receipt, basically accepted on blockchain w/ hash, move from queuedTx to pendingTx:\n                convertQueuedToPending(result, description, meta);\n            })\n            .catch((err: { data: { message: any; }; message: any; }) => {\n                // if it fails to be accepted by user, display as warning (i guess):\n                const warning = (err.data && err.data.message) || err.message;\n                setWarning(warning);\n                setTimeout(() => {\n                    setWarning(null);\n                }, DISMISS_WARNINGS_TIMEOUT);\n                setCompletedTx(null);\n                setPendingTx([]);\n                setQueuedTx(null);\n            });\n    };\n\n    const isBusy = () => {\n        return pendingTx.length > 0 || queuedTx;\n    };\n\n    return (\n        <WalletStateContext.Provider\n            value={{\n                queuedTx,\n                pendingTx,\n                completedTx,\n                noOperations,\n                warning,\n                addNewQueuedTx,\n                convertQueuedToPending,\n                doAnOperation,\n                isBusy,\n            }}\n        >\n            {children}\n        </WalletStateContext.Provider>\n    );\n};\n\nexport { WalletStateProvider, WalletStateContext };\n","import { Button, Grid, TextareaAutosize, TextField } from \"@mui/material\";\nimport React, { Fragment, useContext, useState } from \"react\";\nimport LoadingComponent from \"../components/loading\";\nimport { toast } from \"react-toastify\";\nimport { useWallet } from \"use-wallet\";\nimport {\n  getNFTMarketContract,\n  isTransactionMined,\n} from \"../utils/contract.utils\";\nimport { WalletStateContext } from \"../utils/WalletStateContext\";\nimport { SkynetClient, genKeyPairFromSeed } from \"skynet-js\";\n\nexport interface Entry<T> {\n  data: T[];\n  dataKey: string;\n  revision: number;\n}\n\nexport interface NftData {\n  tokenId: number;\n  owner: string;\n}\n\nexport interface MintFormState {\n  uri?: string;\n  price?: number;\n  feeAddresses?: string;\n  feePercentages?: string;\n  royaltyAddresses?: string;\n  royaltyPercentages?: string;\n}\n\n// const loanContractAddress = process.env\n//   .REACT_APP_LOAN_CONTRACT_ADDRESS as string;\n// const auctionContractAddress = process.env\n//   .REACT_APP_AUCTION_CONTRACT_ADDRESS as string;\n// const icwContractAddress = process.env.REACT_APP_ICW_CONTRACT_ADDRESS as string;\n\nconst nftMarketContractAddress = process.env\n  .REACT_APP_NFT_MARKET_CONTRACT_ADDRESS as string;\n\nconst onUploadProgress = (progress, { loaded, total }) => {\n  toast(`Saving into DB...${Math.round(progress * 100)}%`);\n};\n\nconst client = new SkynetClient(\"https://siasky.net\", {\n  onUploadProgress,\n});\n\nconst saveNft = async (nft: NftData) => {\n  try {\n    const { privateKey, publicKey } = genKeyPairFromSeed(nft.owner);\n    const savedNftsKey = nft.owner;\n\n    let entry: Entry<NftData>;\n    try {\n      entry = await client.db.getJSON(publicKey, savedNftsKey);\n    } catch (err) {}\n\n    if (!entry.data) {\n      entry.data = [];\n    }\n\n    entry.data.push(nft);\n    await client.db.setJSON(privateKey, savedNftsKey, entry.data);\n\n    return true;\n  } catch (err) {\n    console.log(err);\n  }\n\n  return false;\n};\n\nconst MintForm = () => {\n  const [formState, setFormState] = useState<MintFormState>({});\n  const [showLoading, setShowLoading] = useState(false);\n\n  const [isUriError, setIsUriError] = useState(false);\n  const [uriError, setUriError] = useState(\"\");\n  const [isPriceError, setIsPriceError] = useState(false);\n  const [priceError, setPriceError] = useState(\"\");\n\n  const wallet = useWallet();\n  const walletStateContext = useContext(WalletStateContext);\n\n  React.useEffect(() => {\n    const addGnosisChainNetwork = async () => {\n      const chainId = process.env.REACT_APP_CHAIN_ID as string;\n      const chainName = process.env.REACT_APP_CHAIN_NAME as string;\n      const symbol = process.env.REACT_APP_CHAIN_SYMBOL as string;\n      const rpcUrl = process.env.REACT_APP_CHAIN_RPC_URL as string;\n      const explorerUrl = process.env.REACT_APP_CHAIN_EXPLORER_URL as string;\n      try {\n        await wallet.ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: chainId }], // Hexadecimal version of 80001, prefixed with 0x\n        });\n      } catch (error: any) {\n        if (error.code === 4902) {\n          try {\n            await wallet.ethereum.request({\n              method: \"wallet_addEthereumChain\",\n              params: [\n                {\n                  chainId: chainId, // Hexadecimal version of 80001, prefixed with 0x\n                  chainName: chainName,\n                  nativeCurrency: {\n                    name: chainName,\n                    symbol: symbol,\n                    decimals: 18,\n                  },\n                  rpcUrls: [rpcUrl],\n                  blockExplorerUrls: [explorerUrl],\n                  iconUrls: [\"\"],\n                },\n              ],\n            });\n          } catch (addError) {\n            console.log(\"Did not add network\");\n          }\n        }\n      }\n    };\n\n    if (\n      wallet.isConnected &&\n      wallet.status === \"connected\" &&\n      wallet.chainId !== +process.env.NEXT_PUBLIC_CHAIN_ID\n    ) {\n      addGnosisChainNetwork();\n    }\n  }, [wallet.status, wallet]);\n\n  const handleTextAreaChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    setFormState({\n      ...formState,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState({\n      ...formState,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const resetErrors = () => {\n    setIsUriError(false);\n    setIsPriceError(false);\n  };\n\n  const validateUri = async () => {\n    // {\"name\":\"EVERGLOW - Yiren Common Card\",\"description\":\"Bon Bon Chocolat [THE SHOW April 9th, 2019] It seems like Yiren's beauty can be seen from the universe\",\"image\":\"https://ipfs.featured.market/ipfs/QmdEkZaTxr3vgCautYqd3KfeKLac9MVRDyGerLiyMsotYu\",\"external_url\":\"0.04\",\"external_metadata_ipfs\":\"\",\"attributes\":{\"thumbnail_url\":\"https://ipfs.featured.market/ipfs/QmUDjR73nLuVjH6B4MgqPwb3Uzq9uKUzisv1LNYGwGdM6j\",\"content_type\":\"video/mp4\"}}\n    try {\n      const response = await (await fetch(formState.uri)).json();\n      if (response.name && response.description && response.image) {\n        return true;\n      }\n    } catch (error) {\n      toast.error(\"Error validating URI: \" + error);\n    }\n    return false;\n  };\n\n  const validateRoyaltyAddresses = () => {\n    const royaltyAddresses = formState.royaltyAddresses.split(\",\");\n    const royaltyPercentages = formState.royaltyPercentages.split(\",\");\n\n    if (royaltyAddresses.length === 0 || royaltyAddresses[0].length === 0) {\n      toast.error(\"Royalty address can not be empty\");\n      return;\n    }\n\n    if (royaltyPercentages.length === 0 || royaltyPercentages[0].length === 0) {\n      toast.error(\"Royalty share percentages can not be empty\");\n      return;\n    }\n\n    if (royaltyAddresses.length !== royaltyPercentages.length) {\n      toast.error(\n        \"Royalties and Percentages not the same length - \" +\n          royaltyAddresses.length +\n          \" : \" +\n          royaltyPercentages.length\n      );\n      return false;\n    }\n\n    let sum = royaltyPercentages\n      .map((el) => +el)\n      .reduce((el, sum) => (sum += el));\n    if (sum !== 100) {\n      toast.error(\"Sum of Royalty percentages must equal 100\");\n      return false;\n    }\n    return true;\n  };\n\n  const validateFeeAddresses = () => {\n    const feeAddresses = formState.feeAddresses.split(\",\");\n    const feePercentages = formState.feePercentages.split(\",\");\n\n    if (feeAddresses.length === 0 || feeAddresses[0].length === 0) {\n      toast.error(\"Owner address can not be empty\");\n      return;\n    }\n\n    if (feePercentages.length === 0 || feePercentages[0].length === 0) {\n      toast.error(\"Owner share percentages can not be empty\");\n      return;\n    }\n\n    if (feeAddresses.length !== feePercentages.length) {\n      toast.error(\n        \"Owners and Percentages not the same length - \" +\n          feeAddresses.length +\n          \" : \" +\n          feePercentages.length\n      );\n      return false;\n    }\n\n    let sum = feePercentages.map((el) => +el).reduce((el, sum) => (sum += el));\n    if (sum !== 100) {\n      toast.error(\"Sum of Fee percentages must equal 100\");\n      return false;\n    }\n    return true;\n  };\n\n  const getMintedTokenIdFromTransactionReceipt = (txReceipt) => {\n    const relevantTransferEvent = txReceipt.events.find(\n      (e) => e.event === \"Minted\"\n    );\n\n    const tokenId = relevantTransferEvent.args.tokenId.toNumber();\n    const address = relevantTransferEvent.args.to;\n    return { tokenId, address };\n  };\n\n  const validate = async () => {\n    resetErrors();\n    toast.info(\"Checking URI....\" + formState.uri);\n    if (formState.uri && formState.uri.length <= 0) {\n      setUriError(\"Please enter the token URI\");\n      setIsUriError(true);\n      return false;\n    }\n\n    if (!(await validateUri())) {\n      setUriError(\"URI is not a valid NFT json file\");\n      setIsUriError(true);\n      return false;\n    }\n    toast.info(\"URI is valid\");\n\n    if (formState.price < 1) {\n      setPriceError(\"Price can not be less than one\");\n      setIsPriceError(true);\n      return false;\n    }\n\n    if (!validateFeeAddresses()) {\n      return false;\n    }\n\n    if (!validateRoyaltyAddresses()) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const mint = async () => {\n    try {\n      setShowLoading(true);\n      if (await validate()) {\n        if (wallet.isConnected()) {\n          const nftMarket = getNFTMarketContract(\n            nftMarketContractAddress,\n            wallet.ethereum\n          );\n          toast(\"Minting....\");\n          const mintTxPromise = nftMarket.mint(\n            formState.uri,\n            formState.price,\n            formState.feeAddresses.split(\",\"),\n            formState.feePercentages.split(\",\"),\n            formState.royaltyAddresses.split(\",\"),\n            formState.royaltyPercentages.split(\",\")\n          );\n\n          walletStateContext.addNewQueuedTx(\n            mintTxPromise,\n            \"Minting NFT Market\",\n            {}\n          );\n\n          const mintTx = await mintTxPromise;\n          const mintTxExecuted = await mintTx.wait(1);\n\n          const isMined = await isTransactionMined(\n            wallet.ethereum,\n            mintTxExecuted.transactionHash,\n            +(process.env.REACT_APP_TX_WAIT_BLOCK_COUNT as string)\n          );\n\n          if (!isMined) {\n            toast.error(\n              `Transaction not found after ${\n                process.env.REACT_APP_TX_WAIT_BLOCK_COUNT as string\n              } blocks`\n            );\n          } else {\n            const { tokenId, address } =\n              getMintedTokenIdFromTransactionReceipt(mintTxExecuted);\n\n            if (address !== wallet.account) {\n              throw Error(\"Account and Wallet Address Minted not the same\");\n            }\n\n            toast.success(\n              \"NFT Minted Successfully. Check your wallet for the token\"\n            );\n\n            toast(\"Cleaning up...\");\n\n            await saveNft({\n              tokenId: tokenId,\n              owner: address,\n            });\n\n            toast(`New Token Minted: ${tokenId}`);\n          }\n        } else {\n          toast.error(\"Wallet is not connected\");\n        }\n      }\n    } catch (error) {\n      toast(`Error occured during minting: ${error}`);\n    } finally {\n      setShowLoading(false);\n    }\n  };\n\n  return (\n    <Fragment>\n      <LoadingComponent open={showLoading} />\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <TextField\n            name=\"uri\"\n            type=\"url\"\n            label=\"Metadata URI\"\n            defaultValue={formState.uri}\n            fullWidth\n            margin=\"dense\"\n            onChange={handleChange}\n            error={isUriError}\n            helperText={uriError}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <TextField\n            name=\"price\"\n            type=\"price\"\n            label=\"Price (in iCW token)\"\n            defaultValue={formState.price}\n            fullWidth\n            margin=\"dense\"\n            onChange={handleChange}\n            error={isPriceError}\n            helperText={priceError}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <label>Owners (comma separated for multiple addresses)</label>\n        </Grid>\n        <Grid item xs={12}>\n          <TextareaAutosize\n            name=\"feeAddresses\"\n            aria-label=\"owners addresses\"\n            minRows={3}\n            placeholder=\"Owner Addreses: the price is shared among these addreses\"\n            style={{ width: \"100%\" }}\n            defaultValue={formState.feeAddresses}\n            onChange={handleTextAreaChange}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <label>\n            Owners Percentages (comma separated for multiple percentages)\n          </label>\n        </Grid>\n        <Grid item xs={12}>\n          <TextareaAutosize\n            name=\"feePercentages\"\n            aria-label=\"owners percentages\"\n            minRows={3}\n            placeholder=\"Owner Percentages: the price is shared using these percentages\"\n            style={{ width: \"100%\" }}\n            defaultValue={formState.feePercentages}\n            onChange={handleTextAreaChange}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <label>\n            Royalty Addresses (comma separated for multiple addresses)\n          </label>\n        </Grid>\n        <Grid item xs={12}>\n          <TextareaAutosize\n            name=\"royaltyAddresses\"\n            aria-label=\"royalty addresses\"\n            minRows={3}\n            placeholder=\"Royalty Addreses: the royalty (20%) is shared among these addreses\"\n            style={{ width: \"100%\" }}\n            defaultValue={formState.royaltyAddresses}\n            onChange={handleTextAreaChange}\n          />\n        </Grid>\n\n        <Grid item xs={12}>\n          <label>\n            Royalty Percentages (comma separated for multiple percentages)\n          </label>\n        </Grid>\n        <Grid item xs={12}>\n          <TextareaAutosize\n            name=\"royaltyPercentages\"\n            aria-label=\"royalty percentages\"\n            minRows={3}\n            placeholder=\"Royalty Percentages: the royalty (20%) is shared using these percentages\"\n            style={{ width: \"100%\" }}\n            defaultValue={formState.royaltyPercentages}\n            onChange={handleTextAreaChange}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button variant=\"outlined\" color=\"secondary\" onClick={() => mint()}>\n            Mint NFT\n          </Button>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default MintForm;\n","import { Button, Grid } from \"@mui/material\";\nimport { Box, spacing } from \"@mui/system\";\nimport { ethers } from \"ethers\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport LoadingComponent from \"../components/loading\";\nimport { getNftContract, getNFTMarketContract } from \"../utils/contract.utils\";\nimport { TokenData } from \"../utils/dtos\";\n\nconst nftContractAddress = process.env.REACT_APP_ICW_NFT as string;\nconst nftMarketContractAddress = process.env\n  .REACT_APP_NFT_MARKET_CONTRACT_ADDRESS as string;\n\nconst BuyPage = () => {\n  const wallet = useWallet();\n  const [showLoading, setShowLoading] = useState(false);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const [paginatedTokens, setPaginatedTokens] = useState<Array<TokenData>>([]);\n\n  const getUri = async (tokenId) => {\n    const nft = getNftContract(nftContractAddress, wallet.ethereum);\n    const url = await nft.tokenURI(tokenId);\n    const metadata = await (await fetch(url)).json();\n\n    return metadata;\n  };\n\n  const getAllTokens = async () => {\n    if (wallet.isConnected()) {\n      setShowLoading(true);\n      const nftMarket = getNFTMarketContract(\n        nftMarketContractAddress,\n        wallet.ethereum\n      );\n      const nft = getNftContract(nftContractAddress, wallet.ethereum);\n      const allNfts = await nft.currentTokenId();\n      const tokenInfos = [];\n      if (allNfts > 0) {\n        const start = rowsPerPage * page;\n        let end = start + rowsPerPage;\n\n        if (end > allNfts) {\n          end = allNfts;\n        }\n        if (start < allNfts) {\n          for (let i = start; i < end; i++) {\n            const blockTokenInfo = await nftMarket.getTokenInfo(i);\n\n            if (blockTokenInfo.forSale) {\n              const tokenInfo: TokenData = {\n                forAuction: blockTokenInfo.forAuction,\n                forLoan: blockTokenInfo.forLoan,\n                forSale: blockTokenInfo.forSale ? \"yes\" : \"no\",\n                minter: blockTokenInfo.minter,\n                onLoan: blockTokenInfo.onLoan,\n                owner: blockTokenInfo.owner,\n                price: ethers.utils.formatEther(blockTokenInfo.price),\n                tokenId: blockTokenInfo.tokenId.toNumber(),\n                metadata: await getUri(i),\n              };\n              tokenInfos.push(tokenInfo);\n            }\n          }\n        }\n\n        setPaginatedTokens(tokenInfos);\n        setShowLoading(false);\n      }\n    }\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  useEffect(() => {\n    getAllTokens();\n  }, [wallet.status, wallet]);\n\n  const buy = (tokenId) => {};\n  return (\n    <Fragment>\n      <LoadingComponent open={showLoading} />\n      <Grid container spacing={2}>\n        {paginatedTokens.map((token) => (\n          <Grid item xs={4} key={token.tokenId}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <img src={token.metadata.image} width=\"100%\" alt=\"NFT\" />\n              </Grid>\n              <Grid item xs={9}>\n                <Box sx={{ fontWeight: \"bold\" }}>\n                  <span>{token.metadata.name}</span>\n                </Box>\n              </Grid>\n              <Grid item xs={3}>\n                <span>{Number(token.price).toFixed(5)}</span>\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  fullWidth\n                  onClick={() => buy(token.tokenId)}\n                >\n                  Buy NFT\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        ))}\n        <Grid item xs={4}>\n          <Grid container spacing={2}></Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <Grid container spacing={2}></Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <Grid container spacing={2}></Grid>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default BuyPage;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport { DialogProps } from \"../utils/dtos\";\nimport { getNftContract } from \"../utils/contract.utils\";\nimport { useWallet } from \"use-wallet\";\nimport LoadingComponent from \"../components/loading\";\nimport {\n  FormControl,\n  FormHelperText,\n  Grid,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n} from \"@mui/material\";\n\nconst nftContractAddress = process.env.REACT_APP_ICW_NFT as string;\n\nconst SaleDialog = (props: DialogProps) => {\n  const { open, handleClose, data } = props;\n  const [showLoading, setShowLoading] = useState(false);\n  const [imageUrl, setImageUrl] = useState();\n  const [disableSale, setDisableSale] = useState(false);\n  const [saleType, setSaleType] = useState(\"Auction\");\n  const [description, setDescription] = useState();\n\n  const wallet = useWallet();\n\n  useEffect(() => {\n    let isMounted = true;\n    const getUri = async () => {\n      if (wallet.isConnected()) {\n        setShowLoading(true);\n        const { tokenId } = data;\n        const nft = getNftContract(nftContractAddress, wallet.ethereum);\n        const url = await nft.tokenURI(tokenId);\n        const metadata = await (await fetch(url)).json();\n        setImageUrl(metadata.image);\n        setDescription(metadata.description);\n        setShowLoading(false);\n\n        setDisableSale(data.forSale === \"yes\" ? true : false);\n      }\n    };\n\n    getUri();\n\n    return () => {\n      if (isMounted) {\n        isMounted = false;\n      }\n    };\n  }, [data, wallet]);\n\n  const handleChange = (event: SelectChangeEvent) => {\n    setSaleType(event.target.value);\n    console.log(saleType);\n  };\n\n  const sell = () => {};\n\n  return (\n    <Fragment>\n      <LoadingComponent open={showLoading} />\n      {imageUrl && (\n        <Dialog\n          open={open}\n          onClose={handleClose}\n          maxWidth=\"md\"\n          fullWidth={true}\n        >\n          <DialogTitle>Token Details</DialogTitle>\n          <DialogContent>\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <DialogContentText>\n                  <img src={imageUrl} width=\"400\" alt=\"NFT\" />\n                </DialogContentText>\n              </Grid>\n              <Grid item xs={6}>\n                <Grid item xs={12}>\n                  <p>{description ? description : \"NFT Details\"}</p>\n                </Grid>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <TextField\n                      name=\"price\"\n                      type=\"price\"\n                      label=\"Price (in iCW token)\"\n                      value={data.price}\n                      fullWidth\n                      margin=\"dense\"\n                      disabled={disableSale}\n                    />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <FormControl sx={{ m: 1, minWidth: 120 }} fullWidth>\n                      <Select\n                        disabled={disableSale}\n                        value={saleType}\n                        defaultValue={saleType}\n                        onChange={handleChange}\n                        displayEmpty\n                        inputProps={{ \"aria-label\": \"Select Sale Type\" }}\n                      >\n                        <MenuItem value=\"Auction\">Auction</MenuItem>\n                        <MenuItem value=\"Sale\">Sale</MenuItem>\n                      </Select>\n                      <FormHelperText>Select Sale Type</FormHelperText>\n                    </FormControl>\n                  </Grid>\n\n                  <Grid item xs={6}>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      fullWidth\n                      disabled={disableSale}\n                      onClick={() => sell()}\n                    >\n                      Sell NFT\n                    </Button>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Button\n                      variant=\"outlined\"\n                      color=\"secondary\"\n                      fullWidth\n                      onClick={handleClose}\n                    >\n                      Close\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </DialogContent>\n        </Dialog>\n      )}\n    </Fragment>\n  );\n};\n\nexport default SaleDialog;\n","import {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n} from \"@mui/material\";\nimport { ethers } from \"ethers\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useWallet } from \"use-wallet\";\nimport LoadingComponent from \"../components/loading\";\nimport SaleDialog from \"../dialogs/sale-dialog\";\nimport { getNftContract, getNFTMarketContract } from \"../utils/contract.utils\";\nimport { Column, TokenData } from \"../utils/dtos\";\n\nconst nftContractAddress = process.env.REACT_APP_ICW_NFT as string;\nconst nftMarketContractAddress = process.env\n  .REACT_APP_NFT_MARKET_CONTRACT_ADDRESS as string;\n\nconst OwnedTokensPage = () => {\n  const wallet = useWallet();\n  const [showLoading, setShowLoading] = useState(false);\n  const [userTokens, setUserTokens] = useState<Array<TokenData>>([]);\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const [showSaleDialog, setShowSaleDialog] = React.useState(false);\n  const [selectedToken, setSelectedToken] = React.useState<TokenData>();\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const columns: readonly Column[] = [\n    { id: \"tokenId\", label: \"Token ID\" },\n    { id: \"minter\", label: \"Minted By\" },\n    { id: \"owner\", label: \"Owner\" },\n    { id: \"price\", label: \"Price\" },\n    { id: \"forSale\", label: \"For Sale\" },\n  ];\n\n  useEffect(() => {\n    const populateUserTokens = async () => {\n      if (wallet.isConnected()) {\n        setShowLoading(true);\n        const nftMarket = getNFTMarketContract(\n          nftMarketContractAddress,\n          wallet.ethereum\n        );\n        const nft = getNftContract(nftContractAddress, wallet.ethereum);\n        const balanceOfAddress = await nft.balanceOf(wallet.account);\n        const tokenInfos = [];\n        if (balanceOfAddress > 0) {\n          for (let i = 0; i < balanceOfAddress; i++) {\n            const tokenId = await nft.tokenOfOwnerByIndex(wallet.account, i);\n            const blockTokenInfo = await nftMarket.getTokenInfo(\n              tokenId.toNumber()\n            );\n\n            const tokenInfo: TokenData = {\n              forAuction: blockTokenInfo.forAuction,\n              forLoan: blockTokenInfo.forLoan,\n              forSale: blockTokenInfo.forSale ? \"yes\" : \"no\",\n              minter: blockTokenInfo.minter,\n              onLoan: blockTokenInfo.onLoan,\n              owner: blockTokenInfo.owner,\n              price: ethers.utils.formatEther(blockTokenInfo.price),\n              tokenId: blockTokenInfo.tokenId.toNumber(),\n              metadata: {}\n            };\n            tokenInfos.push(tokenInfo);\n          }\n\n          setUserTokens(tokenInfos);\n        }\n\n        setShowLoading(false);\n      }\n    };\n\n    populateUserTokens();\n  }, [wallet.status, wallet]);\n\n  const handleSalesDataClose = () => {\n    setShowSaleDialog(false);\n  };\n\n  const selectTokenData = (tokenData) => {\n    setSelectedToken(tokenData);\n    setShowSaleDialog(true);\n  };\n\n  return (\n    <Fragment>\n      <LoadingComponent open={showLoading} />      \n      {selectedToken && (\n        <SaleDialog\n          data={selectedToken}\n          open={showSaleDialog}\n          handleClose={handleSalesDataClose}\n        />\n      )}\n      <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\n        <TableContainer sx={{ maxHeight: 440 }}>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell\n                    key={column.id}\n                    align=\"center\"\n                    style={{ minWidth: \"auto\" }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {userTokens\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => {\n                  return (\n                    <TableRow\n                      hover\n                      onClick={() => {\n                        selectTokenData(row);\n                      }}\n                      role=\"checkbox\"\n                      tabIndex={-1}\n                      key={row.tokenId}\n                    >\n                      {columns.map((column) => {\n                        const value = row[column.id];\n                        return (\n                          <TableCell key={column.id} align=\"center\">\n                            {value}\n                          </TableCell>\n                        );\n                      })}\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[10, 25, 100]}\n          component=\"div\"\n          count={userTokens.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </Fragment>\n  );\n};\n\nexport default OwnedTokensPage;\n","import { Box, Button, Container, Tab, Tabs } from \"@mui/material\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { useWallet } from \"use-wallet\";\nimport MintForm from \"./forms/mint-form\";\nimport BuyPage from \"./pages/buy-page\";\nimport OwnedTokensPage from \"./pages/owned-tokens-page\";\n\nfunction App() {\n  const [value, setValue] = React.useState(0);\n\n  const wallet = useWallet();\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  interface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n  }\n\n  const TabPanel = (props: TabPanelProps) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n      </div>\n    );\n  };\n\n  const a11yProps = (index: number) => {\n    return {\n      id: `simple-tab-${index}`,\n      \"aria-controls\": `simple-tabpanel-${index}`,\n    };\n  };\n\n  const ConnectWallet = () => {\n    return (\n      <Box style={{ paddingTop: \"10px\", display: \"flex\", gap: \"10px\" }}>\n        <Button\n          variant=\"outlined\"\n          disabled={wallet.status === \"connected\"}\n          onClick={() => wallet.connect(\"provided\")}\n        >\n          {wallet.status === \"connected\"\n            ? wallet?.account\n            : \"Click here to connect Wallet\"}\n        </Button>\n        <Button\n          variant=\"outlined\"\n          disabled={wallet.status !== \"connected\"}\n          onClick={() => wallet.reset()}\n        >\n          Disconnect\n        </Button>\n      </Box>\n    );\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <ConnectWallet />\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs value={value} onChange={handleChange} aria-label=\"Tabs\">\n          <Tab label=\"UPLOAD\" {...a11yProps(0)} />\n          <Tab label=\"MINT\" {...a11yProps(1)} />\n          <Tab label=\"SELL\" {...a11yProps(2)} />\n          <Tab label=\"BUY\" {...a11yProps(3)} />\n          <Tab label=\"LOAN\" {...a11yProps(4)} />\n        </Tabs>\n      </Box>\n      <TabPanel value={value} index={0}>\n        Upload Image to IPFS and Create JSON Metadata\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <MintForm />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <OwnedTokensPage />\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        <BuyPage />\n      </TabPanel>\n      <TabPanel value={value} index={4}>\n        Item Four\n      </TabPanel>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { UseWalletProvider } from \"use-wallet\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer } from \"react-toastify\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <UseWalletProvider>\n      <ToastContainer />\n      <App />\n    </UseWalletProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}